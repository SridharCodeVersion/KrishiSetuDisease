
import { useState, useRef, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { 
  MessageCircle, 
  Send, 
  Mic, 
  MicOff, 
  Volume2, 
  VolumeX, 
  Languages, 
  Bot,
  User,
  X,
  Minimize2,
  Maximize2
} from "lucide-react";
import farmerAvatar from "@assets/generated_images/Friendly_farmer_avatar_illustration_b7f49052.png";

interface Message {
  id: string;
  content: string;
  sender: "user" | "bot";
  timestamp: Date;
  language?: string;
  translation?: string;
  originalContent?: string;
}

interface AIChatbotProps {
  isOpen: boolean;
  onToggle: () => void;
  isMinimized: boolean;
  onMinimizeToggle: () => void;
}

const languages = [
  { code: "en", name: "English", flag: "ЁЯЗ║ЁЯЗ╕" },
  { code: "hi", name: "рд╣рд┐рдВрджреА", flag: "ЁЯЗоЁЯЗ│" },
  { code: "ta", name: "родрооро┐ро┤рпН", flag: "ЁЯЗоЁЯЗ│" },
  { code: "te", name: "р░др▒Жр░▓р▒Бр░Чр▒Б", flag: "ЁЯЗоЁЯЗ│" },
  { code: "bn", name: "ржмрж╛ржВрж▓рж╛", flag: "ЁЯЗзЁЯЗй" },
  { code: "mr", name: "рдорд░рд╛рдареА", flag: "ЁЯЗоЁЯЗ│" },
  { code: "pa", name: "рикрй░риЬри╛римрйА", flag: "ЁЯЗоЁЯЗ│" },
  { code: "kn", name: "р▓Хр▓ир│Нр▓ир▓б", flag: "ЁЯЗоЁЯЗ│" },
  { code: "gu", name: "ркЧрлБркЬрк░рк╛ркдрлА", flag: "ЁЯЗоЁЯЗ│" },
  { code: "ml", name: "р┤ор┤▓р┤пр┤╛р┤│р┤В", flag: "ЁЯЗоЁЯЗ│" },
];

// Enhanced disease database with comprehensive information
const diseaseDatabase = {
  "tomato": {
    "late_blight": {
      symptoms: ["dark water-soaked spots", "white fungal growth", "brown lesions", "leaf yellowing"],
      treatment: "Apply copper-based fungicide like copper sulfate or copper hydroxide. Ensure good air circulation and avoid overhead watering.",
      prevention: "Use resistant varieties, practice crop rotation, maintain proper spacing between plants.",
      severity: "high"
    },
    "early_blight": {
      symptoms: ["circular brown spots", "target-like rings", "yellowing leaves", "defoliation"],
      treatment: "Spray with fungicides containing chlorothalonil or mancozeb. Remove affected leaves immediately.",
      prevention: "Avoid overhead irrigation, provide adequate spacing, use mulch to prevent soil splashing.",
      severity: "medium"
    },
    "bacterial_wilt": {
      symptoms: ["sudden wilting", "yellow leaves", "brown vascular tissue", "plant collapse"],
      treatment: "Remove infected plants immediately. Apply copper-based bactericide to surrounding plants.",
      prevention: "Use certified disease-free seeds, practice crop rotation, improve soil drainage.",
      severity: "high"
    }
  },
  "rice": {
    "blast": {
      symptoms: ["diamond-shaped lesions", "gray spots with brown borders", "leaf death", "panicle infection"],
      treatment: "Apply tricyclazole or carbendazim fungicide. Increase potassium fertilization.",
      prevention: "Use resistant varieties, avoid excessive nitrogen, maintain proper water management.",
      severity: "high"
    },
    "bacterial_leaf_blight": {
      symptoms: ["water-soaked lesions", "yellow halos", "leaf drying", "systemic infection"],
      treatment: "Spray copper-based bactericides. Apply streptomycin if available.",
      prevention: "Use resistant varieties, avoid injury to plants, manage water levels properly.",
      severity: "medium"
    }
  },
  "wheat": {
    "rust": {
      symptoms: ["orange pustules", "reddish-brown spots", "leaf yellowing", "reduced yield"],
      treatment: "Apply propiconazole or tebuconazole fungicide. Use systemic fungicides for severe infections.",
      prevention: "Plant rust-resistant varieties, avoid late sowing, maintain proper nutrition.",
      severity: "medium"
    },
    "powdery_mildew": {
      symptoms: ["white powdery growth", "leaf yellowing", "stunted growth", "reduced photosynthesis"],
      treatment: "Spray with sulfur-based fungicides or triadimefon. Ensure good air circulation.",
      prevention: "Plant resistant varieties, avoid overcrowding, maintain moderate moisture.",
      severity: "low"
    }
  }
};

// Enhanced translation database for all languages
const translations = {
  "en": {
    "greeting": "Hello! I'm your AI farming assistant. I can help you identify crop diseases, recommend treatments, and provide farming advice. What would you like to know?",
    "disease_identified": "Based on your description, this appears to be",
    "treatment_recommendation": "Treatment Recommendation:",
    "prevention_tips": "Prevention Tips:",
    "severity": "Severity Level:",
    "need_more_info": "Could you provide more details about the symptoms you're observing?",
    "crop_not_found": "I don't have specific information about that crop. Could you try with rice, wheat, or tomato?",
    "general_advice": "For healthy crops, ensure proper watering, adequate sunlight, balanced nutrition, and regular monitoring for pests and diseases.",
    "water_guidelines": "Watering Guidelines:",
    "fertilization_tips": "Fertilization Tips:",
    "pest_management": "Pest Management:"
  },
  "hi": {
    "greeting": "рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ AI рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ рд╣реВрдВред рдореИрдВ рдлрд╕рд▓ рд░реЛрдЧреЛрдВ рдХреА рдкрд╣рдЪрд╛рди, рдЙрдкрдЪрд╛рд░ рд╕реБрдЭрд╛рдиреЗ рдФрд░ рдХреГрд╖рд┐ рд╕рд▓рд╛рд╣ рдкреНрд░рджрд╛рди рдХрд░рдиреЗ рдореЗрдВ рдЖрдкрдХреА рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВред рдЖрдк рдХреНрдпрд╛ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?",
    "disease_identified": "рдЖрдкрдХреЗ рд╡рд░реНрдгрди рдХреЗ рдЖрдзрд╛рд░ рдкрд░, рдпрд╣ рдкреНрд░рддреАрдд рд╣реЛрддрд╛ рд╣реИ",
    "treatment_recommendation": "рдЙрдкрдЪрд╛рд░ рдХреА рд╕рд┐рдлрд╛рд░рд┐рд╢:",
    "prevention_tips": "рд░реЛрдХрдерд╛рдо рдХреЗ рдЙрдкрд╛рдп:",
    "severity": "рдЧрдВрднреАрд░рддрд╛ рдХрд╛ рд╕реНрддрд░:",
    "need_more_info": "рдХреНрдпрд╛ рдЖрдк рдЙрди рд▓рдХреНрд╖рдгреЛрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдФрд░ рд╡рд┐рд╡рд░рдг рджреЗ рд╕рдХрддреЗ рд╣реИрдВ рдЬреЛ рдЖрдк рджреЗрдЦ рд░рд╣реЗ рд╣реИрдВ?",
    "crop_not_found": "рдореЗрд░реЗ рдкрд╛рд╕ рдЙрд╕ рдлрд╕рд▓ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рд╡рд┐рд╢рд┐рд╖реНрдЯ рдЬрд╛рдирдХрд╛рд░реА рдирд╣реАрдВ рд╣реИред рдХреНрдпрд╛ рдЖрдк рдЪрд╛рд╡рд▓, рдЧреЗрд╣реВрдВ рдпрд╛ рдЯрдорд╛рдЯрд░ рдХреЗ рд╕рд╛рде рдХреЛрд╢рд┐рд╢ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ?",
    "general_advice": "рд╕реНрд╡рд╕реНрде рдлрд╕рд▓реЛрдВ рдХреЗ рд▓рд┐рдП, рдЙрдЪрд┐рдд рдкрд╛рдиреА рджреЗрдирд╛, рдкрд░реНрдпрд╛рдкреНрдд рдзреВрдк, рд╕рдВрддреБрд▓рд┐рдд рдкреЛрд╖рдг рдФрд░ рдХреАрдЯреЛрдВ рдФрд░ рд░реЛрдЧреЛрдВ рдХреА рдирд┐рдпрдорд┐рдд рдирд┐рдЧрд░рд╛рдиреА рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВред",
    "water_guidelines": "рдкрд╛рдиреА рджреЗрдиреЗ рдХреЗ рджрд┐рд╢рд╛рдирд┐рд░реНрджреЗрд╢:",
    "fertilization_tips": "рдЙрд░реНрд╡рд░рдХ рдХреЗ рд╕реБрдЭрд╛рд╡:",
    "pest_management": "рдХреАрдЯ рдкреНрд░рдмрдВрдзрди:"
  },
  "ta": {
    "greeting": "ро╡рогроХрпНроХроорпН! роиро╛ройрпН роЙроЩрпНроХро│ро┐ройрпН AI ро╡ро┐ро╡роЪро╛роп роЙродро╡ро┐ропро╛ро│ро░рпН. рокропро┐ро░рпН роирпЛропрпНроХро│рпИроХрпН роХрогрпНроЯро▒ро┐родро▓рпН, роЪро┐роХро┐роЪрпНроЪрпИропрпИрокрпН рокро░ро┐роирпНродрпБро░рпИродрпНродро▓рпН рооро▒рпНро▒рпБроорпН ро╡ро┐ро╡роЪро╛роп роЖро▓рпЛроЪройрпИ ро╡ро┤роЩрпНроХрпБродро▓рпН роЖроХро┐ропро╡ро▒рпНро▒ро┐ро▓рпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роЙродро╡ роорпБроЯро┐ропрпБроорпН. роирпАроЩрпНроХро│рпН роОройрпНрой роЕро▒ро┐роп ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпАро░рпНроХро│рпН?",
    "disease_identified": "роЙроЩрпНроХро│рпН ро╡ро┐ро│роХрпНроХродрпНродро┐ройрпН роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓рпН, роЗродрпБ родрпЛройрпНро▒рпБроХро┐ро▒родрпБ",
    "treatment_recommendation": "роЪро┐роХро┐роЪрпНроЪрпИ рокро░ро┐роирпНродрпБро░рпИ:",
    "prevention_tips": "родроЯрпБрокрпНрокрпБ роХрпБро▒ро┐рокрпНрокрпБроХро│рпН:",
    "severity": "родрпАро╡ро┐ро░родрпНродройрпНроорпИ роиро┐ро▓рпИ:",
    "need_more_info": "роирпАроЩрпНроХро│рпН роХро╡ройро┐роХрпНроХрпБроорпН роЕро▒ро┐роХрпБро▒ро┐роХро│рпН рокро▒рпНро▒ро┐ роорпЗро▓рпБроорпН ро╡ро┐ро╡ро░роЩрпНроХро│рпИ ро╡ро┤роЩрпНроХ роорпБроЯро┐ропрпБрооро╛?",
    "crop_not_found": "роЕроирпНрод рокропро┐ро░рпИрокрпН рокро▒рпНро▒ро┐ роОройроХрпНроХрпБ роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ родроХро╡ро▓рпН роЗро▓рпНро▓рпИред роЕро░ро┐роЪро┐, роХрпЛродрпБроорпИ роЕро▓рпНро▓родрпБ родроХрпНроХро╛ро│ро┐ропрпБроЯройрпН роорпБропро▒рпНроЪро┐ роЪрпЖропрпНроп роорпБроЯро┐ропрпБрооро╛?",
    "general_advice": "роЖро░рпЛроХрпНроХро┐ропрооро╛рой рокропро┐ро░рпНроХро│рпБроХрпНроХрпБ, роЪро░ро┐ропро╛рой роирпАро░рпНрокрпНрокро╛роЪройроорпН, рокрпЛродрпБрооро╛рой роЪрпВро░ро┐роп роТро│ро┐, роЪроороЪрпНроЪрпАро░рпН роКроЯрпНроЯроорпН рооро▒рпНро▒рпБроорпН рокрпВроЪрпНроЪро┐ рооро▒рпНро▒рпБроорпН роирпЛропрпНроХро│рпБроХрпНроХрпБ ро╡ро┤роХрпНроХрооро╛рой роХрогрпНроХро╛рогро┐рокрпНрокрпИ роЙро▒рпБродро┐ роЪрпЖропрпНропрпБроЩрпНроХро│рпНред",
    "water_guidelines": "роирпАро░рпН ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпНроХро│рпН:",
    "fertilization_tips": "роЙро░ роХрпБро▒ро┐рокрпНрокрпБроХро│рпН:",
    "pest_management": "рокрпВроЪрпНроЪро┐ роорпЗро▓ро╛рогрпНроорпИ:"
  },
  "te": {
    "greeting": "р░ир░ор░╕р▒Нр░Хр░╛р░░р░В! р░ир▒Зр░ир▒Б р░ор▒А AI р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╕р░╣р░╛р░пр░Хр▒Бр░бр░ир▒Б. р░кр░Вр░Я р░╡р▒Нр░пр░╛р░зр▒Бр░▓р░ир▒Б р░Чр▒Бр░░р▒Нр░др░┐р░Вр░Ър░бр░В, р░Ър░┐р░Хр░┐р░др▒Нр░╕р░▓р░ир▒Б р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Б р░Ър▒Зр░пр░бр░В р░оро▒р▒Нр░░р░┐р░пр▒Б р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╕р░▓р░╣р░╛р░▓р▒Б р░Ер░Вр░жр░┐р░Вр░Ър░бр░Вр░▓р▒Л р░ор▒Ар░Хр▒Б р░╕р░╣р░╛р░пр░кр░бр░Чр░▓р░ир▒Б. р░ор▒Ар░░р▒Б р░Пр░ор░┐ р░др▒Жр░▓р▒Бр░╕р▒Бр░Хр▒Лр░╡р░╛р░▓р░ир▒Бр░Хр▒Бр░Вр░Яр▒Бр░ир▒Нр░ир░╛р░░р▒Б?",
    "disease_identified": "р░ор▒А р░╡р░┐р░╡р░░р░г р░Жр░зр░╛р░░р░Вр░Чр░╛, р░Зр░жр░┐ р░Хр░ир░┐р░кр░┐р░╕р▒Нр░др▒Бр░Вр░жр░┐",
    "treatment_recommendation": "р░Ър░┐р░Хр░┐р░др▒Нр░╕р░╛ р░╕р░┐р░лр░╛р░░р░╕р▒Б:",
    "prevention_tips": "р░ир░┐р░╡р░╛р░░р░г р░Ър░┐р░Яр▒Нр░Хр░╛р░▓р▒Б:",
    "severity": "р░др▒Ар░╡р▒Нр░░р░д р░╕р▒Нр░ер░╛р░пр░┐:",
    "need_more_info": "р░ор▒Ар░░р▒Б р░Чр░ор░ир░┐р░╕р▒Нр░др▒Бр░ир▒Нр░и р░▓р░Хр▒Нр░╖р░гр░╛р░▓ р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░ор░░р░┐р░ир▒Нр░ир░┐ р░╡р░┐р░╡р░░р░╛р░▓р▒Б р░Ер░Вр░жр░┐р░Вр░Ър░Чр░▓р░░р░╛?",
    "crop_not_found": "р░Ж р░кр░Вр░Я р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░ир░╛р░Хр▒Б р░ир░┐р░░р▒Нр░жр░┐р░╖р▒Нр░Я р░╕р░ор░╛р░Ър░╛р░░р░В р░▓р▒Зр░жр▒Б. р░╡р░░р░┐, р░Чр▒Лр░зр▒Бр░о р░▓р▒Зр░жр░╛ р░Яр░ор▒Лр░Яр░╛р░др▒Л р░кр▒Нр░░р░пр░др▒Нр░ир░┐р░Вр░Ър░Чр░▓р░░р░╛?",
    "general_advice": "р░Жр░░р▒Лр░Чр▒Нр░пр░Хр░░р░ор▒Ир░и р░кр░Вр░Яр░▓ р░Хр▒Лр░╕р░В, р░╕р░░р▒Ир░и р░ир▒Ар░Яр░┐р░кр░╛р░░р▒Бр░жр░▓, р░др░Чр░┐р░и р░╕р▒Вр░░р▒Нр░пр░Хр░╛р░Вр░др░┐, р░╕р░ор░др▒Бр░▓р▒Нр░п р░кр▒Лр░╖р░г р░ор░░р░┐р░пр▒Б р░Ър▒Ар░ор░▓р▒Б р░ор░░р░┐р░пр▒Б р░╡р▒Нр░пр░╛р░зр▒Бр░▓ р░Хр▒Лр░╕р░В р░Хр▒Нр░░р░ор░В р░др░кр▒Нр░кр░Хр▒Бр░Вр░бр░╛ р░кр░░р▒Нр░пр░╡р▒Зр░Хр▒Нр░╖р░гр░ир▒Б р░ир░┐р░░р▒Нр░зр░╛р░░р░┐р░Вр░Ър░Вр░бр░┐ред",
    "water_guidelines": "р░ир▒Ар░Яр░┐ р░ор░╛р░░р▒Нр░Чр░жр░░р▒Нр░╢р░Хр░╛р░▓р▒Б:",
    "fertilization_tips": "р░Ор░░р▒Бр░╡р▒Бр░▓ р░Ър░┐р░Яр▒Нр░Хр░╛р░▓р▒Б:",
    "pest_management": "р░кр▒Бр░░р▒Бр░Чр▒Бр░▓ р░ир░┐р░░р▒Нр░╡р░╣р░г:"
  },
  "bn": {
    "greeting": "рж╣рзНржпрж╛рж▓рзЛ! ржЖржорж┐ ржЖржкржирж╛рж░ AI ржХрзГрж╖рж┐ рж╕рж╣рж╛ржпрж╝ржХред ржЖржорж┐ ржлрж╕рж▓рзЗрж░ рж░рзЛржЧ ржЪрж┐рж╣рзНржирж┐рждржХрж░ржг, ржЪрж┐ржХрж┐рзОрж╕рж╛рж░ рж╕рзБржкрж╛рж░рж┐рж╢ ржПржмржВ ржХрзГрж╖рж┐ ржкрж░рж╛ржорж░рзНрж╢ ржкрзНрж░ржжрж╛ржирзЗ ржЖржкржирж╛ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐ред ржЖржкржирж┐ ржХрзА ржЬрж╛ржирждрзЗ ржЪрж╛ржи?",
    "disease_identified": "ржЖржкржирж╛рж░ ржмрж░рзНржгржирж╛рж░ ржЙржкрж░ ржнрж┐рждрзНрждрж┐ ржХрж░рзЗ, ржПржЯрж┐ ржоржирзЗ рж╣ржЪрзНржЫрзЗ",
    "treatment_recommendation": "ржЪрж┐ржХрж┐рзОрж╕рж╛рж░ рж╕рзБржкрж╛рж░рж┐рж╢:",
    "prevention_tips": "ржкрзНрж░рждрж┐рж░рзЛржзрзЗрж░ ржЯрж┐ржкрж╕:",
    "severity": "ржЧрзБрж░рзБрждрзНржмрзЗрж░ рж╕рзНрждрж░:",
    "need_more_info": "ржЖржкржирж┐ ржпрзЗ рж▓ржХрзНрж╖ржгржЧрзБрж▓рж┐ ржкрж░рзНржпржмрзЗржХрзНрж╖ржг ржХрж░ржЫрзЗржи рж╕рзЗ рж╕ржорзНржкрж░рзНржХрзЗ ржЖрж░ржУ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рждржерзНржп ржжрж┐рждрзЗ ржкрж╛рж░рзЗржи?",
    "crop_not_found": "рж╕рзЗржЗ ржлрж╕рж▓ рж╕ржорзНржкрж░рзНржХрзЗ ржЖржорж╛рж░ ржХрж╛ржЫрзЗ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рждржерзНржп ржирзЗржЗред ржзрж╛ржи, ржЧржо ржмрж╛ ржЯржорзЗржЯрзЛ ржжрж┐ржпрж╝рзЗ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рждрзЗ ржкрж╛рж░рзЗржи?",
    "general_advice": "рж╕рзБрж╕рзНрже ржлрж╕рж▓рзЗрж░ ржЬржирзНржп, рж╕ржарж┐ржХ рж╕рзЗржЪ, ржкрж░рзНржпрж╛ржкрзНржд рж╕рзВрж░рзНржпрж╛рж▓рзЛржХ, рж╕рзБрж╖ржо ржкрзБрж╖рзНржЯрж┐ ржПржмржВ ржкрзЛржХрж╛ржорж╛ржХржбрж╝ ржУ рж░рзЛржЧрзЗрж░ ржирж┐ржпрж╝ржорж┐ржд ржирж┐рж░рзАржХрзНрж╖ржг ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржиред",
    "water_guidelines": "ржкрж╛ржирж┐рж░ ржирж┐рж░рзНржжрзЗрж╢рж┐ржХрж╛:",
    "fertilization_tips": "рж╕рж╛рж░ ржкрзНрж░ржпрж╝рзЛржЧрзЗрж░ ржЯрж┐ржкрж╕:",
    "pest_management": "ржХрзАржЯржкрждржЩрзНржЧ ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛:"
  },
  "mr": {
    "greeting": "рдирдорд╕реНрдХрд╛рд░! рдореА рддреБрдордЪрд╛ AI рд╢реЗрддреА рд╕рд╣рд╛рдпреНрдпрдХ рдЖрд╣реЗ. рдореА рдкрд┐рдХрд╛рдВрдЪреНрдпрд╛ рд░реЛрдЧрд╛рдВрдЪреА рдУрд│рдЦ, рдЙрдкрдЪрд╛рд░рд╛рдВрдЪреА рд╢рд┐рдлрд╛рд░рд╕ рдЖрдгрд┐ рд╢реЗрддреАрд╡рд┐рд╖рдпрдХ рд╕рд▓реНрд▓рд╛ рджреЗрдгреНрдпрд╛рдд рддреБрдореНрд╣рд╛рд▓рд╛ рдорджрдд рдХрд░реВ рд╢рдХрддреЛ. рддреБрдореНрд╣рд╛рд▓рд╛ рдХрд╛рдп рдЬрд╛рдгреВрди рдШреНрдпрд╛рдпрдЪреЗ рдЖрд╣реЗ?",
    "disease_identified": "рддреБрдордЪреНрдпрд╛ рд╡рд░реНрдгрдирд╛рд╡рд░ рдЖрдзрд╛рд░рд┐рдд, рд╣реЗ рджрд┐рд╕рддреЗ",
    "treatment_recommendation": "рдЙрдкрдЪрд╛рд░рд╛рдЪреА рд╢рд┐рдлрд╛рд░рд╕:",
    "prevention_tips": "рдкреНрд░рддрд┐рдмрдВрдзрдХ рдЯрд┐рдкреНрд╕:",
    "severity": "рддреАрд╡реНрд░рддреЗрдЪреА рдкрд╛рддрд│реА:",
    "need_more_info": "рддреБрдореНрд╣реА рдкрд╛рд╣рдд рдЕрд╕рд▓реЗрд▓реНрдпрд╛ рд▓рдХреНрд╖рдгрд╛рдВрдмрджреНрджрд▓ рдЕрдзрд┐рдХ рддрдкрд╢реАрд▓ рджреЗрдК рд╢рдХрддрд╛ рдХрд╛?",
    "crop_not_found": "рдорд╛рдЭреНрдпрд╛рдХрдбреЗ рддреНрдпрд╛ рдкрд┐рдХрд╛рд╡рд┐рд╖рдпреА рд╡рд┐рд╢рд┐рд╖реНрдЯ рдорд╛рд╣рд┐рддреА рдирд╛рд╣реА. рддрд╛рдВрджреВрд│, рдЧрд╣реВ рдХрд┐рдВрд╡рд╛ рдЯреЛрдореЗрдЯреЛрд╕рд╣ рдкреНрд░рдпрддреНрди рдХрд░реВ рд╢рдХрддрд╛ рдХрд╛?",
    "general_advice": "рдирд┐рд░реЛрдЧреА рдкрд┐рдХрд╛рдВрд╕рд╛рдареА, рдпреЛрдЧреНрдп рдкрд╛рдгреА, рдкреБрд░реЗрд╕рд╛ рд╕реВрд░реНрдпрдкреНрд░рдХрд╛рд╢, рд╕рдВрддреБрд▓рд┐рдд рдкреЛрд╖рдг рдЖрдгрд┐ рдХреАрдб рдЖрдгрд┐ рд░реЛрдЧрд╛рдВрдЪреА рдирд┐рдпрдорд┐рдд рддрдкрд╛рд╕рдгреА рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рд╛ред",
    "water_guidelines": "рдкрд╛рдгреНрдпрд╛рдЪреЗ рдорд╛рд░реНрдЧрджрд░реНрд╢рди:",
    "fertilization_tips": "рдЦрдд рд╡рд╛рдкрд░рд╛рдЪреНрдпрд╛ рдЯрд┐рдкреНрд╕:",
    "pest_management": "рдХреАрдб рд╡реНрдпрд╡рд╕реНрдерд╛рдкрди:"
  },
  "pa": {
    "greeting": "ри╕рид ри╕рйНри░рйА риЕриХри╛ри▓! риорйИриВ ридрйБри╣ри╛рибри╛ AI риЦрйЗридрйА ри╕ри╣ри╛риЗриХ ри╣ри╛риВред риорйИриВ рилри╕ри▓ рижрйАриЖриВ римри┐риори╛ри░рйАриЖриВ рижрйА рикриЫри╛риг, риЗри▓ри╛риЬ рижрйА ри╕ри┐рилри╛ри░ри┐ри╕ри╝ риЕридрйЗ риЦрйЗридрйА ри╕ри▓ри╛ри╣ рикрйНри░рижри╛рии риХри░рии ри╡ри┐рй▒риЪ ридрйБри╣ри╛рибрйА риорижриж риХри░ ри╕риХрижри╛ ри╣ри╛риВред ридрйБри╕рйАриВ риХрйА риЬри╛ригриири╛ риЪри╛ри╣рйБрй░рижрйЗ ри╣рйЛ?",
    "disease_identified": "ридрйБри╣ри╛рибрйЗ ри╡ри░ригрии рижрйЗ риЖризри╛ри░ ридрйЗ, риЗри╣ ри▓рй▒риЧрижри╛ ри╣рйИ",
    "treatment_recommendation": "риЗри▓ри╛риЬ рижрйА ри╕ри┐рилри╛ри░ри┐ри╕ри╝:",
    "prevention_tips": "римриЪри╛риЕ рижрйЗ риЯри┐рй▒рикри╕:",
    "severity": "риЧрй░ринрйАри░ридри╛ рижри╛ рикрй▒ризри░:",
    "need_more_info": "риХрйА ридрйБри╕рйАриВ риЙриирйНри╣ри╛риВ ри▓рй▒риЫригри╛риВ римри╛ри░рйЗ ри╣рйЛри░ ри╡рйЗри░ри╡рйЗ рижрйЗ ри╕риХрижрйЗ ри╣рйЛ риЬрйЛ ридрйБри╕рйАриВ рижрйЗриЦ ри░ри╣рйЗ ри╣рйЛ?",
    "crop_not_found": "риорйЗри░рйЗ риХрйЛри▓ риЙри╕ рилри╕ри▓ римри╛ри░рйЗ риЦри╛ри╕ риЬри╛ригриХри╛ри░рйА риири╣рйАриВ ри╣рйИред риХрйА ридрйБри╕рйАриВ риЪрйМри▓, риХригриХ риЬри╛риВ риЯриори╛риЯри░ риири╛ри▓ риХрйЛри╕ри╝ри┐ри╕ри╝ риХри░ ри╕риХрижрйЗ ри╣рйЛ?",
    "general_advice": "ри╕ри┐ри╣ридриорй░риж рилри╕ри▓ри╛риВ ри▓риИ, ри╕ри╣рйА рикри╛ригрйА, ри▓рйЛрйЬрйАриВрижри╛ ри╕рйВри░риЬ, ри╕рй░ридрйБри▓ри┐рид рикрйЛри╕ри╝риг риЕридрйЗ риХрйАрйЬрйЗ риЕридрйЗ римри┐риори╛ри░рйАриЖриВ рижрйА риири┐риприори┐рид риири┐риЧри░ри╛риирйА риприХрйАриирйА римригри╛риУред",
    "water_guidelines": "рикри╛ригрйА рижрйЗ рижри┐ри╕ри╝ри╛-риири┐ри░рижрйЗри╕ри╝:",
    "fertilization_tips": "риЦри╛риж рижрйЗ риЯри┐рй▒рикри╕:",
    "pest_management": "риХрйАрйЬрйЗ рикрйНри░римрй░ризрии:"
  },
  "kn": {
    "greeting": "р▓ир▓ор▓╕р│Нр▓Хр▓╛р▓░! р▓ир▓╛р▓ир│Б р▓ир▓┐р▓ор│Нр▓о AI р▓Хр│Гр▓╖р▓┐ р▓╕р▓╣р▓╛р▓пр▓Х. р▓мр│Жр▓│р│Ж р▓░р│Лр▓Чр▓Чр▓│ р▓Чр│Бр▓░р│Бр▓др▓┐р▓╕р│Бр▓╡р▓┐р▓Хр│Ж, р▓Ър▓┐р▓Хр▓┐р▓др│Нр▓╕р│Жр▓п р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Бр▓Чр▓│р│Б р▓ор▓др│Нр▓др│Б р▓Хр│Гр▓╖р▓┐ р▓╕р▓▓р▓╣р│Ж р▓ир│Ар▓бр│Бр▓╡р▓▓р│Нр▓▓р▓┐ р▓ир▓┐р▓ор▓Чр│Ж р▓╕р▓╣р▓╛р▓п р▓ор▓╛р▓бр▓мр▓▓р│Нр▓▓р│Ж. р▓ир│Ар▓╡р│Б р▓Пр▓ир│Б р▓др▓┐р▓│р▓┐р▓пр▓▓р│Б р▓мр▓пр▓╕р│Бр▓др│Нр▓др│Ар▓░р▓┐?",
    "disease_identified": "р▓ир▓┐р▓ор│Нр▓о р▓╡р▓┐р▓╡р▓░р▓гр│Жр▓п р▓Жр▓зр▓╛р▓░р▓ж р▓ор│Зр▓▓р│Ж, р▓Зр▓жр│Б р▓Хр▓╛р▓гр│Бр▓др│Нр▓др▓жр│Ж",
    "treatment_recommendation": "р▓Ър▓┐р▓Хр▓┐р▓др│Нр▓╕р│Жр▓п р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Б:",
    "prevention_tips": "р▓др▓бр│Жр▓Чр▓Яр│Нр▓Яр│Бр▓╡ р▓╕р▓▓р▓╣р│Жр▓Чр▓│р│Б:",
    "severity": "р▓др│Ар▓╡р│Нр▓░р▓др│Жр▓п р▓ор▓Яр│Нр▓Я:",
    "need_more_info": "р▓ир│Ар▓╡р│Б р▓Чр▓ор▓ир▓┐р▓╕р│Бр▓др│Нр▓др▓┐р▓░р│Бр▓╡ р▓▓р▓Хр│Нр▓╖р▓гр▓Чр▓│ р▓мр▓Чр│Нр▓Чр│Ж р▓╣р│Жр▓Ър│Нр▓Ър▓┐р▓и р▓╡р▓┐р▓╡р▓░р▓Чр▓│р▓ир│Нр▓ир│Б р▓ир│Ар▓бр▓мр▓╣р│Бр▓жр│З?",
    "crop_not_found": "р▓Ж р▓мр│Жр▓│р│Жр▓п р▓мр▓Чр│Нр▓Чр│Ж р▓ир▓ир▓Чр│Ж р▓ир▓┐р▓░р│Нр▓жр▓┐р▓╖р│Нр▓Я р▓ор▓╛р▓╣р▓┐р▓др▓┐ р▓Зр▓▓р│Нр▓▓. р▓Ер▓Хр│Нр▓Хр▓┐, р▓Чр│Лр▓зр▓┐ р▓Ер▓ер▓╡р▓╛ р▓Яр│Кр▓ор│Жр▓Яр│Кр▓жр│Кр▓Вр▓жр▓┐р▓Чр│Ж р▓кр│Нр▓░р▓пр▓др│Нр▓ир▓┐р▓╕р▓мр▓╣р│Бр▓жр│З?",
    "general_advice": "р▓Жр▓░р│Лр▓Чр│Нр▓пр▓Хр▓░ р▓мр│Жр▓│р│Жр▓Чр▓│р▓┐р▓Чр▓╛р▓Чр▓┐, р▓╕р▓░р▓┐р▓пр▓╛р▓ж р▓ир│Ар▓░р▓╛р▓╡р▓░р▓┐, р▓╕р▓╛р▓Хр▓╖р│Нр▓Яр│Б р▓╕р│Вр▓░р│Нр▓пр▓Хр▓╛р▓Вр▓др▓┐, р▓╕р▓ор▓др│Лр▓▓р▓┐р▓д р▓кр│Лр▓╖р▓гр│Ж р▓ор▓др│Нр▓др│Б р▓Хр│Ар▓Яр▓Чр▓│р│Б р▓ор▓др│Нр▓др│Б р▓░р│Лр▓Чр▓Чр▓│р▓┐р▓Чр│Ж р▓ир▓┐р▓пр▓ор▓┐р▓д р▓ор│Зр▓▓р│Нр▓╡р▓┐р▓Ър▓╛р▓░р▓гр│Жр▓пр▓ир│Нр▓ир│Б р▓Цр▓Ър▓┐р▓др▓кр▓бр▓┐р▓╕р▓┐р▓Хр│Кр▓│р│Нр▓│р▓┐ред",
    "water_guidelines": "р▓ир│Ар▓░р▓╛р▓╡р▓░р▓┐ р▓ор▓╛р▓░р│Нр▓Чр▓╕р│Вр▓Ър▓┐р▓Чр▓│р│Б:",
    "fertilization_tips": "р▓Чр│Кр▓мр│Нр▓мр▓░ р▓╕р▓▓р▓╣р│Жр▓Чр▓│р│Б:",
    "pest_management": "р▓Хр│Ар▓Я р▓ир▓┐р▓░р│Нр▓╡р▓╣р▓гр│Ж:"
  },
  "gu": {
    "greeting": "ркиркорк╕рлНркдрлЗ! рк╣рлБркВ ркдркорк╛рк░рлЛ AI ркХрлГрк╖рк┐ рк╕рк╣рк╛ркпркХ ркЫрлБркВ. рк╣рлБркВ рккрк╛ркХркирк╛ рк░рлЛркЧрлЛркирлА ркУрк│ркЦ, рк╕рк╛рк░рк╡рк╛рк░ркирлА ркнрк▓рк╛ркоркгрлЛ ркЕркирлЗ ркХрлГрк╖рк┐ рк╕рк▓рк╛рк╣ ркЖрккрк╡рк╛ркорк╛ркВ ркдркорк╛рк░рлА рк╕рк╣рк╛ркп ркХрк░рлА рк╢ркХрлБркВ ркЫрлБркВ. ркдркорлЗ рк╢рлБркВ ркЬрк╛ркгрк╡рк╛ ркорк╛ркВркЧрлЛ ркЫрлЛ?",
    "disease_identified": "ркдркорк╛рк░рк╛ рк╡рк░рлНркгркиркирк╛ ркЖркзрк╛рк░рлЗ, ркЖ рк▓рк╛ркЧрлЗ ркЫрлЗ",
    "treatment_recommendation": "рк╕рк╛рк░рк╡рк╛рк░ркирлА ркнрк▓рк╛ркоркг:",
    "prevention_tips": "ркирк┐рк╡рк╛рк░ркг ркЯрк┐рккрлНрк╕:",
    "severity": "ркЧркВркнрлАрк░ркдрк╛ркирлБркВ рк╕рлНркдрк░:",
    "need_more_info": "ркдркорлЗ ркЬрлЗ рк▓ркХрлНрк╖ркгрлЛ ркЬрлЛркИ рк░рк╣рлНркпрк╛ ркЫрлЛ ркдрлЗркирк╛ рк╡рк┐рк╢рлЗ рк╡ркзрлБ рк╡рк┐ркЧркдрлЛ ркЖрккрлА рк╢ркХрлЛ ркЫрлЛ?",
    "crop_not_found": "ркорк╛рк░рлА рккрк╛рк╕рлЗ ркдрлЗ рккрк╛ркХ рк╡рк┐рк╢рлЗ рк╡рк┐рк╢рк┐рк╖рлНркЯ ркорк╛рк╣рк┐ркдрлА ркиркерлА. рк╢ркХрлЛ ркдрлЛ ркЪрлЛркЦрк╛, ркШркЙркВ ркЕркерк╡рк╛ ркЯрк╛ркорлЗркЯрк╛ рк╕рк╛ркерлЗ рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ?",
    "general_advice": "рк╕рлНрк╡рк╕рлНрке рккрк╛ркХ ркорк╛ркЯрлЗ, ркпрлЛркЧрлНркп рккрк╛ркгрлА, рккрлВрк░ркдрлЛ рк╕рлВрк░рлНркпрккрлНрк░ркХрк╛рк╢, рк╕ркВркдрлБрк▓рк┐ркд рккрлЛрк╖ркг ркЕркирлЗ ркХрлАркбрк╛ ркЕркирлЗ рк░рлЛркЧрлЛркирлА ркирк┐ркпркорк┐ркд ркжрлЗркЦрк░рлЗркЦ рк╕рлБркирк┐рк╢рлНркЪрк┐ркд ркХрк░рлЛред",
    "water_guidelines": "рккрк╛ркгрлАркирлА ркорк╛рк░рлНркЧркжрк░рлНрк╢рк┐ркХрк╛:",
    "fertilization_tips": "ркЦрк╛ркдрк░ркирлА ркЯрк┐рккрлНрк╕:",
    "pest_management": "ркХрлАркЯ рк╡рлНркпрк╡рк╕рлНркерк╛рккрки:"
  },
  "ml": {
    "greeting": "р┤ир┤ор┤╕р╡Нр┤Хр┤╛р┤░р┤В! р┤Юр┤╛р╡╗ р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж AI р┤Хр╡Гр┤╖р┤┐ р┤╕р┤╣р┤╛р┤пр┤┐р┤пр┤╛р┤гр╡Н. р┤╡р┤┐р┤│ р┤░р╡Лр┤Чр┤Щр╡Нр┤Щр╡╛ р┤др┤┐р┤░р┤┐р┤Ър╡Нр┤Ър┤▒р┤┐р┤пр╡╜, р┤Ър┤┐р┤Хр┤┐р┤др╡Нр┤╕р┤╛ р┤╢р╡Бр┤кр┤╛р╡╝р┤╢р┤Хр╡╛, р┤Хр╡Гр┤╖р┤┐ р┤Йр┤кр┤жр╡Зр┤╢р┤В р┤Ор┤ир╡Нр┤ир┤┐р┤╡р┤пр┤┐р╡╜ р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Ж р┤╕р┤╣р┤╛р┤пр┤┐р┤Хр╡Нр┤Хр┤╛р╡╗ р┤Ор┤ир┤┐р┤Хр╡Нр┤Хр╡Н р┤Хр┤┤р┤┐р┤пр╡Бр┤В. р┤ир┤┐р┤Щр╡Нр┤Щр╡╛ р┤Ор┤ир╡Нр┤др┤╛р┤гр╡Н р┤Ер┤▒р┤┐р┤пр┤╛р╡╗ р┤Жр┤Чр╡Нр┤░р┤╣р┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир┤др╡Н?",
    "disease_identified": "р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤╡р┤┐р┤╡р┤░р┤гр┤др╡Нр┤др┤┐р┤ир╡Нр┤▒р╡Ж р┤Ер┤Яр┤┐р┤╕р╡Нр┤ер┤╛р┤ир┤др╡Нр┤др┤┐р╡╜, р┤Зр┤др╡Н р┤Хр┤╛р┤гр┤кр╡Нр┤кр╡Жр┤Яр╡Бр┤ир╡Нр┤ир╡Б",
    "treatment_recommendation": "р┤Ър┤┐р┤Хр┤┐р┤др╡Нр┤╕р┤╛ р┤╢р╡Бр┤кр┤╛р╡╝р┤╢:",
    "prevention_tips": "р┤кр╡Нр┤░р┤др┤┐р┤░р╡Лр┤з р┤ир╡Бр┤▒р╡Бр┤Щр╡Нр┤Щр╡Бр┤Хр╡╛:",
    "severity": "р┤Чр╡Бр┤░р╡Бр┤др╡Нр┤╡р┤╛р┤Хр╡╝р┤╖р┤г р┤ир┤┐р┤▓:",
    "need_more_info": "р┤ир┤┐р┤Щр╡Нр┤Щр╡╛ р┤ир┤┐р┤░р╡Ар┤Хр╡Нр┤╖р┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤и р┤▓р┤Хр╡Нр┤╖р┤гр┤Щр╡Нр┤Щр┤│р╡Жр┤Хр╡Нр┤Хр╡Бр┤▒р┤┐р┤Ър╡Нр┤Ър╡Н р┤Хр╡Вр┤Яр╡Бр┤др╡╜ р┤╡р┤┐р┤╡р┤░р┤Щр╡Нр┤Щр╡╛ р┤ир╡╜р┤Хр┤╛р┤ор╡Л?",
    "crop_not_found": "р┤Ж р┤╡р┤┐р┤│р┤пр╡Жр┤Хр╡Нр┤Хр╡Бр┤▒р┤┐р┤Ър╡Нр┤Ър╡Н р┤Ор┤ир┤┐р┤Хр╡Нр┤Хр╡Н р┤ир┤┐р╡╝р┤жр╡Нр┤жр┤┐р┤╖р╡Нр┤Я р┤╡р┤┐р┤╡р┤░р┤Щр╡Нр┤Щр┤│р┤┐р┤▓р╡Нр┤▓. р┤ир╡Жр┤▓р╡Нр┤▓р╡Н, р┤Чр╡Лр┤др┤ор╡Нр┤кр╡Н р┤Ер┤▓р╡Нр┤▓р╡Жр┤Щр╡Нр┤Хр┤┐р╡╜ р┤др┤Хр╡Нр┤Хр┤╛р┤│р┤┐ р┤Йр┤кр┤пр╡Лр┤Чр┤┐р┤Ър╡Нр┤Ър╡Н р┤╢р╡Нр┤░р┤ор┤┐р┤Хр╡Нр┤Хр┤╛р┤ор╡Л?",
    "general_advice": "р┤Жр┤░р╡Лр┤Чр╡Нр┤пр┤Хр┤░р┤ор┤╛р┤п р┤╡р┤┐р┤│р┤Хр╡╛р┤Хр╡Нр┤Хр┤╛р┤пр┤┐, р┤╢р┤░р┤┐р┤пр┤╛р┤п р┤ир┤ир┤╡р╡Н, р┤ор┤др┤┐р┤пр┤╛р┤п р┤╕р╡Вр┤░р╡Нр┤пр┤кр╡Нр┤░р┤Хр┤╛р┤╢р┤В, р┤╕р┤ор┤др╡Бр┤▓р┤┐р┤др┤ор┤╛р┤п р┤кр╡Лр┤╖р┤гр┤В, р┤Хр╡Ар┤Яр┤Щр╡Нр┤Щр╡╛р┤Хр╡Нр┤Хр╡Бр┤В р┤░р╡Лр┤Чр┤Щр╡Нр┤Щр╡╛р┤Хр╡Нр┤Хр╡Бр┤В р┤╕р╡Нр┤ер┤┐р┤░р┤ор┤╛р┤п р┤ир┤┐р┤░р╡Ар┤Хр╡Нр┤╖р┤гр┤В р┤Ор┤ир╡Нр┤ир┤┐р┤╡ р┤Йр┤▒р┤кр╡Нр┤кр┤╛р┤Хр╡Нр┤Хр╡Бр┤Хред",
    "water_guidelines": "р┤Ьр┤▓ р┤ор┤╛р╡╝р┤Чр╡Нр┤Чр┤ир┤┐р╡╝р┤жр╡Нр┤жр╡Зр┤╢р┤Щр╡Нр┤Щр╡╛:",
    "fertilization_tips": "р┤╡р┤│р┤кр╡Нр┤░р┤пр╡Лр┤Ч р┤ир╡Бр┤▒р╡Бр┤Щр╡Нр┤Щр╡Бр┤Хр╡╛:",
    "pest_management": "р┤Хр╡Ар┤Я р┤ир┤┐р┤пр┤ир╡Нр┤др╡Нр┤░р┤гр┤В:"
  }
};

export default function AIChatbot({ isOpen, onToggle, isMinimized, onMinimizeToggle }: AIChatbotProps) {
  const [messages, setMessages] = useState<Message[]>([]);
  const [newMessage, setNewMessage] = useState("");
  const [isListening, setIsListening] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [selectedLanguage, setSelectedLanguage] = useState("en");
  const [isTyping, setIsTyping] = useState(false);
  const [speechRecognition, setSpeechRecognition] = useState<any>(null);
  const [speechSynthesis, setSpeechSynthesis] = useState<any>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  // Initialize speech recognition and synthesis
  useEffect(() => {
    if (typeof window !== 'undefined') {
      const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;
      const speechSynth = window.speechSynthesis;
      
      if (SpeechRecognition) {
        const recognition = new SpeechRecognition();
        recognition.continuous = false;
        recognition.interimResults = false;
        recognition.lang = selectedLanguage === 'en' ? 'en-US' : 
                          selectedLanguage === 'hi' ? 'hi-IN' : 
                          selectedLanguage === 'ta' ? 'ta-IN' : 
                          selectedLanguage === 'te' ? 'te-IN' : 
                          selectedLanguage === 'bn' ? 'bn-BD' : 
                          selectedLanguage === 'mr' ? 'mr-IN' : 
                          selectedLanguage === 'pa' ? 'pa-IN' : 
                          selectedLanguage === 'kn' ? 'kn-IN' : 
                          selectedLanguage === 'gu' ? 'gu-IN' : 
                          selectedLanguage === 'ml' ? 'ml-IN' : 'en-US';
        
        recognition.onresult = (event: any) => {
          const transcript = event.results[0][0].transcript;
          setNewMessage(transcript);
          setIsListening(false);
        };
        
        recognition.onerror = () => {
          setIsListening(false);
        };
        
        recognition.onend = () => {
          setIsListening(false);
        };
        
        setSpeechRecognition(recognition);
      }
      
      setSpeechSynthesis(speechSynth);
    }
  }, [selectedLanguage]);

  // Initialize with welcome message
  useEffect(() => {
    if (messages.length === 0) {
      setMessages([{
        id: "1",
        content: translations[selectedLanguage]?.greeting || translations.en.greeting,
        sender: "bot",
        timestamp: new Date(),
        language: selectedLanguage
      }]);
    }
  }, [selectedLanguage, messages.length]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // Enhanced AI response generation with comprehensive question handling
  const generateAIResponse = (userMessage: string): string => {
    const message = userMessage.toLowerCase();
    const lang = translations[selectedLanguage] || translations.en;

    // Greeting responses
    if (message.includes('hello') || message.includes('hi') || message.includes('namaste') || 
        message.includes('good morning') || message.includes('good evening') || message.includes('hey')) {
      return lang.greeting;
    }

    // Weather-related questions
    if (message.includes('weather') || message.includes('rain') || message.includes('temperature') || 
        message.includes('climate') || message.includes('season')) {
      return `**Weather & Climate Information** ЁЯМдя╕П

For optimal crop growth, consider these weather factors:
- **Temperature**: Most crops prefer 20-30┬░C during growing season
- **Rainfall**: Adequate water supply is crucial (varies by crop)
- **Humidity**: High humidity can promote fungal diseases
- **Sunlight**: 6-8 hours of direct sunlight daily is ideal

**Weather-based farming tips:**
- Monitor weather forecasts for irrigation planning
- Protect crops during extreme weather events
- Adjust planting schedules based on seasonal patterns
- Use weather data for pest and disease prediction

Would you like specific weather recommendations for a particular crop?`;
    }

    // Soil-related questions
    if (message.includes('soil') || message.includes('ph') || message.includes('fertility') || 
        message.includes('nutrients') || message.includes('compost')) {
      return `**Soil Health & Management** ЁЯМ▒

Healthy soil is the foundation of successful farming:

**Soil Testing:**
- Test pH levels (6.0-7.5 ideal for most crops)
- Check nutrient levels (N-P-K)
- Assess organic matter content
- Monitor soil texture and drainage

**Soil Improvement:**
- Add organic compost regularly
- Practice crop rotation
- Use cover crops to prevent erosion
- Avoid over-tillage

**Common Soil Issues:**
- **Acidic soil**: Add lime to raise pH
- **Alkaline soil**: Add sulfur or organic matter
- **Compacted soil**: Use deep tillage and add organic matter
- **Poor drainage**: Create raised beds or add sand

What specific soil concern do you have?`;
    }

    // Crop-specific disease detection and treatment
    for (const crop in diseaseDatabase) {
      if (message.includes(crop)) {
        // Check for specific disease symptoms
        for (const disease in diseaseDatabase[crop]) {
          const diseaseInfo = diseaseDatabase[crop][disease];
          const symptoms = diseaseInfo.symptoms;
          
          // Enhanced symptom matching
          const matchedSymptoms = symptoms.filter(symptom => {
            const symptomWords = symptom.toLowerCase().split(' ');
            return symptomWords.some(word => message.includes(word)) ||
                   message.includes(symptom.toLowerCase());
          });

          if (matchedSymptoms.length > 0 || message.includes(disease.replace('_', ' '))) {
            const severityEmoji = diseaseInfo.severity === 'high' ? 'ЁЯФ┤' : 
                                diseaseInfo.severity === 'medium' ? 'ЁЯЯб' : 'ЁЯЯв';
            
            return `${lang.disease_identified} **${disease.replace(/_/g, ' ').toUpperCase()} in ${crop.toUpperCase()}** ${severityEmoji}

**${lang.treatment_recommendation}**
${diseaseInfo.treatment}

**${lang.prevention_tips}**
${diseaseInfo.prevention}

**${lang.severity}** ${diseaseInfo.severity.toUpperCase()}

**Immediate Actions:**
1. Isolate affected plants if possible
2. Remove and dispose of infected plant material
3. Apply recommended treatment immediately
4. Monitor surrounding plants closely

Need more specific guidance or have questions about application methods?`;
          }
        }

        // General crop information when no specific disease is detected
        const cropAdvice = {
          tomato: `**Tomato Cultivation Guide** ЁЯНЕ
- **Planting**: Warm season crop, plant after last frost
- **Watering**: Deep, consistent watering at soil level
- **Support**: Use stakes or cages for vine support
- **Common issues**: Blight, wilt, blossom end rot
- **Harvest**: Pick when fruits are firm and fully colored`,
          
          rice: `**Rice Cultivation Guide** ЁЯМ╛
- **Planting**: Requires flooded fields or consistent moisture
- **Varieties**: Choose based on local climate and market demand
- **Water management**: Maintain 2-5cm water depth in paddy
- **Common issues**: Blast, bacterial blight, stem borer
- **Harvest**: When grains are golden and firm`,
          
          wheat: `**Wheat Cultivation Guide** ЁЯМ╛
- **Planting**: Cool season crop, plant in fall or early spring
- **Soil**: Well-drained, fertile soil with pH 6.0-7.5
- **Fertilization**: High nitrogen requirement, split applications
- **Common issues**: Rust, powdery mildew, aphids
- **Harvest**: When grain moisture is 12-14%`
        };

        return cropAdvice[crop] || `**${crop.toUpperCase()} Information**

I can help you with ${crop} cultivation. Please specify what you'd like to know:
- Disease identification and treatment
- Planting and care instructions
- Pest management
- Harvesting guidelines
- Nutrition requirements

What specific aspect of ${crop} farming interests you?`;
      }
    }

    // Fertilizer and nutrition questions
    if (message.includes('fertilizer') || message.includes('nutrition') || message.includes('npk') || 
        message.includes('nitrogen') || message.includes('phosphorus') || message.includes('potassium')) {
      return `**${lang.fertilization_tips}** ЁЯМ┐

**Essential Nutrients (NPK):**
- **Nitrogen (N)**: Promotes leaf growth and green color
- **Phosphorus (P)**: Supports root development and flowering
- **Potassium (K)**: Improves disease resistance and fruit quality

**Application Guidelines:**
- **Soil test first** to determine exact needs
- **Organic options**: Compost, manure, bone meal, kelp meal
- **Chemical fertilizers**: Use balanced ratios (10-10-10 for general use)
- **Timing**: Apply during active growing season
- **Method**: Work into soil, don't just surface apply

**Signs of Deficiency:**
- **Nitrogen**: Yellow leaves, stunted growth
- **Phosphorus**: Purple leaves, poor root development
- **Potassium**: Brown leaf edges, weak stems

Which specific nutrient concern do you have, or what crop are you fertilizing?`;
    }

    // Watering and irrigation questions
    if (message.includes('water') || message.includes('irrigation') || message.includes('watering') || 
        message.includes('drought') || message.includes('moisture')) {
      return `**${lang.water_guidelines}** ЁЯТз

**Optimal Watering Practices:**
- **Timing**: Early morning (6-10 AM) is best
- **Method**: Water at soil level to reduce disease
- **Frequency**: Deep, less frequent watering is better than shallow, frequent watering
- **Amount**: 1-2 inches per week for most crops

**Water Management by Crop Type:**
- **Leafy greens**: Light, frequent watering
- **Root vegetables**: Consistent moisture, avoid waterlogging
- **Fruit crops**: Deep watering, reduce before harvest

**Signs of Water Stress:**
- **Over-watering**: Yellow leaves, root rot, fungal growth
- **Under-watering**: Wilting, dry soil, stunted growth

**Water Conservation:**
- Use mulch to retain moisture
- Install drip irrigation systems
- Collect rainwater for irrigation
- Choose drought-resistant varieties

What's your specific watering challenge?`;
    }

    // Pest management questions
    if (message.includes('pest') || message.includes('insect') || message.includes('bug') || 
        message.includes('aphid') || message.includes('caterpillar') || message.includes('beetle')) {
      return `**${lang.pest_management}** ЁЯРЫ

**Integrated Pest Management (IPM) Approach:**

**1. Prevention:**
- Crop rotation to break pest cycles
- Companion planting (marigolds, basil, mint)
- Healthy soil creates strong, resistant plants
- Regular inspection for early detection

**2. Biological Control:**
- Encourage beneficial insects (ladybugs, lacewings)
- Use beneficial nematodes for soil pests
- Install bird houses for natural predation

**3. Organic Treatments:**
- **Neem oil**: Effective against aphids, mites, whiteflies
- **Diatomaceous earth**: Controls crawling insects
- **Soap spray**: Mix 1 tbsp dish soap per quart water
- **Bt (Bacillus thuringiensis)**: For caterpillars

**4. Chemical Control (last resort):**
- Use only when threshold levels are reached
- Rotate different modes of action
- Follow label instructions carefully
- Apply during calm weather conditions

**Common Pests & Solutions:**
- **Aphids**: Soap spray, ladybugs, neem oil
- **Caterpillars**: Bt spray, hand picking
- **Spider mites**: Increase humidity, predatory mites

What specific pest are you dealing with?`;
    }

    // Harvest and post-harvest questions
    if (message.includes('harvest') || message.includes('when to pick') || message.includes('ripe') || 
        message.includes('storage') || message.includes('post harvest')) {
      return `**Harvest & Post-Harvest Management** ЁЯУж

**Harvest Timing Indicators:**
- **Fruits**: Color change, slight softness, easy separation from stem
- **Vegetables**: Size, color, firmness specific to variety
- **Grains**: Moisture content, color change, test harvest small area

**Harvest Best Practices:**
- **Time of day**: Early morning when temperatures are cool
- **Tools**: Use clean, sharp tools to prevent disease transmission
- **Handling**: Gentle handling to prevent bruising
- **Containers**: Use clean, ventilated containers

**Post-Harvest Storage:**
- **Temperature control**: Most produce requires cool temperatures
- **Humidity**: Optimal levels vary by crop type
- **Ventilation**: Prevent moisture buildup and ethylene accumulation
- **Separation**: Keep ethylene producers away from sensitive crops

**Storage Methods:**
- **Short-term**: Refrigeration, proper containers
- **Long-term**: Freezing, drying, canning, fermentation
- **Root cellars**: For root vegetables and some fruits

**Quality Maintenance:**
- Handle minimally to reduce damage
- Sort and remove damaged items
- Monitor storage conditions regularly

What crop are you planning to harvest?`;
    }

    // Organic farming questions
    if (message.includes('organic') || message.includes('natural') || message.includes('chemical free') || 
        message.includes('sustainable')) {
      return `**Organic Farming Practices** ЁЯМ┐

**Core Principles:**
- Soil health through organic matter
- Biodiversity and ecosystem balance
- Natural pest and disease management
- No synthetic chemicals or GMOs

**Soil Building:**
- Compost and aged manure
- Cover crops and green manures
- Minimal tillage practices
- Crop rotation for nutrient cycling

**Natural Pest Control:**
- Beneficial insect habitats
- Companion planting strategies
- Physical barriers and traps
- Organic-approved sprays (neem, soap, Bt)

**Disease Prevention:**
- Disease-resistant varieties
- Proper plant spacing for air circulation
- Crop rotation to break disease cycles
- Organic fungicides (copper, sulfur)

**Certification Requirements:**
- 3-year transition period from conventional
- Detailed record keeping
- Annual inspections
- Approved input materials only

**Benefits:**
- Improved soil health over time
- Reduced environmental impact
- Premium market prices
- Enhanced biodiversity

Would you like specific guidance on transitioning to organic methods?`;
    }

    // Crop rotation questions
    if (message.includes('rotation') || message.includes('crop rotation') || message.includes('succession')) {
      return `**Crop Rotation Benefits & Strategies** ЁЯФД

**Why Rotate Crops:**
- Prevents soil nutrient depletion
- Breaks pest and disease cycles
- Improves soil structure
- Reduces weed pressure
- Increases biodiversity

**Basic Rotation Principles:**
- **4-year minimum** rotation cycle
- **Different plant families** in sequence
- **Heavy feeders тЖТ Light feeders тЖТ Soil builders**
- Avoid planting same family in consecutive years

**Crop Categories:**
- **Heavy feeders**: Tomatoes, corn, cabbage, squash
- **Light feeders**: Herbs, lettuce, onions, carrots
- **Soil builders**: Legumes (beans, peas, clover)

**Sample 4-Year Rotation:**
1. **Year 1**: Heavy feeders (tomatoes, peppers, corn)
2. **Year 2**: Legumes (beans, peas) - fix nitrogen
3. **Year 3**: Root crops (carrots, beets, radishes)
4. **Year 4**: Brassicas (cabbage, broccoli, kale)

**Planning Tips:**
- Map your garden/fields by zones
- Keep detailed records of what was planted where
- Consider companion planting within rotation
- Plan for cover crops during off-season

Do you need help planning a rotation for specific crops?`;
    }

    // Market and economic questions
    if (message.includes('price') || message.includes('market') || message.includes('sell') || 
        message.includes('profit') || message.includes('economics')) {
      return `**Agricultural Economics & Marketing** ЁЯТ░

**Market Research:**
- Study local demand and pricing trends
- Identify high-value crop opportunities
- Consider processing and value-addition
- Explore direct-to-consumer sales

**Cost Analysis:**
- Calculate input costs (seeds, fertilizers, labor)
- Factor in equipment and infrastructure
- Include post-harvest and marketing costs
- Plan for crop insurance and risk management

**Marketing Strategies:**
- **Direct sales**: Farmers markets, CSA, farm stands
- **Wholesale**: Restaurants, grocery stores, distributors
- **Online sales**: E-commerce platforms, social media
- **Value-added products**: Processing, packaging, branding

**Profit Maximization:**
- Focus on high-value crops suitable for your region
- Reduce input costs through efficient practices
- Minimize post-harvest losses
- Build customer relationships for repeat business

**Record Keeping:**
- Track production costs and yields
- Monitor market prices and trends
- Document best practices and lessons learned
- Maintain financial records for tax purposes

What specific aspect of farm economics interests you?`;
    }

    // Technology and modern farming
    if (message.includes('technology') || message.includes('sensors') || message.includes('automation') || 
        message.includes('precision farming') || message.includes('drones')) {
      return `**Modern Agricultural Technology** ЁЯЪА

**Precision Agriculture Tools:**
- **GPS guidance**: Accurate field operations, reduced overlap
- **Variable rate technology**: Optimize inputs based on field conditions
- **Yield mapping**: Track productivity across fields
- **Soil sampling**: Grid-based nutrient analysis

**Smart Monitoring Systems:**
- **Weather stations**: Real-time climate data
- **Soil sensors**: Moisture, temperature, pH monitoring
- **Plant health sensors**: Early stress detection
- **Irrigation automation**: Water management systems

**Drone Applications:**
- **Crop monitoring**: Health assessment, growth tracking
- **Spray applications**: Targeted pesticide/fertilizer delivery
- **Mapping**: Field boundaries, problem area identification
- **Livestock monitoring**: Herd health and location tracking

**Data Management:**
- **Farm management software**: Planning, record keeping, analysis
- **Mobile apps**: Field data collection, decision support
- **Cloud storage**: Access data anywhere, backup protection
- **Analytics**: Predictive modeling, optimization recommendations

**Benefits:**
- Increased efficiency and productivity
- Reduced input costs and environmental impact
- Better decision making with data insights
- Improved crop quality and yields

Which agricultural technology are you most interested in implementing?`;
    }

    // Default response for unmatched queries
    return `I understand you're asking about farming, but I need more specific information to provide the best help.

**I can assist you with:**
ЁЯМ▒ **Crop Diseases**: Identification, treatment, prevention
ЁЯТз **Water Management**: Irrigation, drainage, water conservation  
ЁЯМ╛ **Crop Guidance**: Planting, care, harvesting for rice, wheat, tomato
ЁЯРЫ **Pest Control**: Organic and conventional pest management
ЁЯМ┐ **Soil Health**: Testing, fertilization, improvement methods
ЁЯУИ **Farm Economics**: Marketing, profitability, cost analysis
ЁЯЪА **Technology**: Modern farming tools and techniques

**Please try asking:**
- "How do I treat tomato blight?"
- "When should I water my crops?"
- "What fertilizer is best for wheat?"
- "How do I control aphids naturally?"
- "Tell me about crop rotation"

What specific farming challenge can I help you solve today?`;
  };

  const handleSendMessage = () => {
    if (!newMessage.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      content: newMessage,
      sender: "user",
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setNewMessage("");
    setIsTyping(true);

    // Generate intelligent AI response
    setTimeout(() => {
      const aiResponse = generateAIResponse(newMessage);
      
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: aiResponse,
        sender: "bot",
        timestamp: new Date(),
        language: selectedLanguage
      };

      setMessages(prev => [...prev, botMessage]);
      setIsTyping(false);
    }, 1500);
  };

  const handleVoiceInput = () => {
    if (!speechRecognition) {
      alert('Speech recognition is not supported in your browser');
      return;
    }

    if (isListening) {
      speechRecognition.stop();
      setIsListening(false);
    } else {
      console.log('Voice input started');
      speechRecognition.start();
      setIsListening(true);
    }
  };

  const handleTextToSpeech = (message: string) => {
    if (!speechSynthesis) {
      alert('Speech synthesis is not supported in your browser');
      return;
    }

    if (isSpeaking) {
      speechSynthesis.cancel();
      setIsSpeaking(false);
    } else {
      const utterance = new SpeechSynthesisUtterance(message);
      
      // Set language for speech synthesis
      const voiceLang = selectedLanguage === 'en' ? 'en-US' : 
                       selectedLanguage === 'hi' ? 'hi-IN' : 
                       selectedLanguage === 'ta' ? 'ta-IN' : 
                       selectedLanguage === 'te' ? 'te-IN' : 
                       selectedLanguage === 'bn' ? 'bn-BD' : 
                       selectedLanguage === 'mr' ? 'mr-IN' : 
                       selectedLanguage === 'pa' ? 'pa-IN' : 
                       selectedLanguage === 'kn' ? 'kn-IN' : 
                       selectedLanguage === 'gu' ? 'gu-IN' : 
                       selectedLanguage === 'ml' ? 'ml-IN' : 'en-US';
      
      utterance.lang = voiceLang;
      utterance.rate = 0.8;
      utterance.pitch = 1;
      
      utterance.onstart = () => setIsSpeaking(true);
      utterance.onend = () => setIsSpeaking(false);
      utterance.onerror = () => setIsSpeaking(false);
      
      speechSynthesis.speak(utterance);
    }
  };

  const translateMessage = async (message: Message) => {
    console.log('Translate:', message.content);
    
    // If already translated, show original content
    if (message.translation && message.originalContent) {
      setMessages(prev => prev.map(msg => 
        msg.id === message.id 
          ? { ...msg, translation: undefined, originalContent: undefined }
          : msg
      ));
      return;
    }

    // Comprehensive translation database for agricultural content
    const agriculturalTranslations = {
      // Common phrases and greetings
      "Hello! I'm your AI farming assistant. I can help you identify crop diseases, recommend treatments, and provide farming advice. What would you like to know?": {
        "hi": "рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ AI рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ рд╣реВрдВред рдореИрдВ рдлрд╕рд▓ рд░реЛрдЧреЛрдВ рдХреА рдкрд╣рдЪрд╛рди, рдЙрдкрдЪрд╛рд░ рд╕реБрдЭрд╛рдиреЗ рдФрд░ рдХреГрд╖рд┐ рд╕рд▓рд╛рд╣ рдкреНрд░рджрд╛рди рдХрд░рдиреЗ рдореЗрдВ рдЖрдкрдХреА рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВред рдЖрдк рдХреНрдпрд╛ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?",
        "ta": "ро╡рогроХрпНроХроорпН! роиро╛ройрпН роЙроЩрпНроХро│ро┐ройрпН AI ро╡ро┐ро╡роЪро╛роп роЙродро╡ро┐ропро╛ро│ро░рпН. рокропро┐ро░рпН роирпЛропрпНроХро│рпИроХрпН роХрогрпНроЯро▒ро┐родро▓рпН, роЪро┐роХро┐роЪрпНроЪрпИропрпИрокрпН рокро░ро┐роирпНродрпБро░рпИродрпНродро▓рпН рооро▒рпНро▒рпБроорпН ро╡ро┐ро╡роЪро╛роп роЖро▓рпЛроЪройрпИ ро╡ро┤роЩрпНроХрпБродро▓рпН роЖроХро┐ропро╡ро▒рпНро▒ро┐ро▓рпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роЙродро╡ роорпБроЯро┐ропрпБроорпН. роирпАроЩрпНроХро│рпН роОройрпНрой роЕро▒ро┐роп ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпАро░рпНроХро│рпН?",
        "te": "р░ир░ор░╕р▒Нр░Хр░╛р░░р░В! р░ир▒Зр░ир▒Б р░ор▒А AI р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╕р░╣р░╛р░пр░Хр▒Бр░бр░ир▒Бред р░кр░Вр░Я р░╡р▒Нр░пр░╛р░зр▒Бр░▓р░ир▒Б р░Чр▒Бр░░р▒Нр░др░┐р░Вр░Ър░бр░В, р░Ър░┐р░Хр░┐р░др▒Нр░╕р░▓р░ир▒Б р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Б р░Ър▒Зр░пр░бр░В р░ор░░р░┐р░пр▒Б р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╕р░▓р░╣р░╛р░▓р▒Б р░Ер░Вр░жр░┐р░Вр░Ър░бр░Вр░▓р▒Л р░ор▒Ар░Хр▒Б р░╕р░╣р░╛р░пр░кр░бр░Чр░▓р░ир▒Бред р░ор▒Ар░░р▒Б р░Пр░ор░┐ р░др▒Жр░▓р▒Бр░╕р▒Бр░Хр▒Лр░╡р░╛р░▓р░ир▒Бр░Хр▒Бр░Вр░Яр▒Бр░ир▒Нр░ир░╛р░░р▒Б?",
        "bn": "рж╣рзНржпрж╛рж▓рзЛ! ржЖржорж┐ ржЖржкржирж╛рж░ AI ржХрзГрж╖рж┐ рж╕рж╣рж╛ржпрж╝ржХред ржЖржорж┐ ржлрж╕рж▓рзЗрж░ рж░рзЛржЧ ржЪрж┐рж╣рзНржирж┐рждржХрж░ржг, ржЪрж┐ржХрж┐рзОрж╕рж╛рж░ рж╕рзБржкрж╛рж░рж┐рж╢ ржПржмржВ ржХрзГрж╖рж┐ ржкрж░рж╛ржорж░рзНрж╢ ржкрзНрж░ржжрж╛ржирзЗ ржЖржкржирж╛ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐ред ржЖржкржирж┐ ржХрзА ржЬрж╛ржирждрзЗ ржЪрж╛ржи?",
        "mr": "рдирдорд╕реНрдХрд╛рд░! рдореА рддреБрдордЪрд╛ AI рд╢реЗрддреА рд╕рд╣рд╛рдпреНрдпрдХ рдЖрд╣реЗ. рдореА рдкрд┐рдХрд╛рдВрдЪреНрдпрд╛ рд░реЛрдЧрд╛рдВрдЪреА рдУрд│рдЦ, рдЙрдкрдЪрд╛рд░рд╛рдВрдЪреА рд╢рд┐рдлрд╛рд░рд╕ рдЖрдгрд┐ рд╢реЗрддреАрд╡рд┐рд╖рдпрдХ рд╕рд▓реНрд▓рд╛ рджреЗрдгреНрдпрд╛рдд рддреБрдореНрд╣рд╛рд▓рд╛ рдорджрдд рдХрд░реВ рд╢рдХрддреЛ. рддреБрдореНрд╣рд╛рд▓рд╛ рдХрд╛рдп рдЬрд╛рдгреВрди рдШреНрдпрд╛рдпрдЪреЗ рдЖрд╣реЗ?",
        "pa": "ри╕рид ри╕рйНри░рйА риЕриХри╛ри▓! риорйИриВ ридрйБри╣ри╛рибри╛ AI риЦрйЗридрйА ри╕ри╣ри╛риЗриХ ри╣ри╛риВред риорйИриВ рилри╕ри▓ рижрйАриЖриВ римри┐риори╛ри░рйАриЖриВ рижрйА рикриЫри╛риг, риЗри▓ри╛риЬ рижрйА ри╕ри┐рилри╛ри░ри┐ри╕ри╝ риЕридрйЗ риЦрйЗридрйА ри╕ри▓ри╛ри╣ рикрйНри░рижри╛рии риХри░рии ри╡ри┐рй▒риЪ ридрйБри╣ри╛рибрйА риорижриж риХри░ ри╕риХрижри╛ ри╣ри╛риВред ридрйБри╕рйАриВ риХрйА риЬри╛ригриири╛ риЪри╛ри╣рйБрй░рижрйЗ ри╣рйЛ?",
        "kn": "р▓ир▓ор▓╕р│Нр▓Хр▓╛р▓░! р▓ир▓╛р▓ир│Б р▓ир▓┐р▓ор│Нр▓о AI р▓Хр│Гр▓╖р▓┐ р▓╕р▓╣р▓╛р▓пр▓Х. р▓мр│Жр▓│р│Ж р▓░р│Лр▓Чр▓Чр▓│ р▓Чр│Бр▓░р│Бр▓др▓┐р▓╕р│Бр▓╡р▓┐р▓Хр│Ж, р▓Ър▓┐р▓Хр▓┐р▓др│Нр▓╕р│Жр▓п р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Бр▓Чр▓│р│Б р▓ор▓др│Нр▓др│Б р▓Хр│Гр▓╖р▓┐ р▓╕р▓▓р▓╣р│Ж р▓ир│Ар▓бр│Бр▓╡р▓▓р│Нр▓▓р▓┐ р▓ир▓┐р▓ор▓Чр│Ж р▓╕р▓╣р▓╛р▓п р▓ор▓╛р▓бр▓мр▓▓р│Нр▓▓р│Жред р▓ир│Ар▓╡р│Б р▓Пр▓ир│Б р▓др▓┐р▓│р▓┐р▓пр▓▓р│Б р▓мр▓пр▓╕р│Бр▓др│Нр▓др│Ар▓░р▓┐?",
        "gu": "ркиркорк╕рлНркдрлЗ! рк╣рлБркВ ркдркорк╛рк░рлЛ AI ркХрлГрк╖рк┐ рк╕рк╣рк╛ркпркХ ркЫрлБркВ. рк╣рлБркВ рккрк╛ркХркирк╛ рк░рлЛркЧрлЛркирлА ркУрк│ркЦ, рк╕рк╛рк░рк╡рк╛рк░ркирлА ркнрк▓рк╛ркоркгрлЛ ркЕркирлЗ ркХрлГрк╖рк┐ рк╕рк▓рк╛рк╣ ркЖрккрк╡рк╛ркорк╛ркВ ркдркорк╛рк░рлА рк╕рк╣рк╛ркп ркХрк░рлА рк╢ркХрлБркВ ркЫрлБркВ. ркдркорлЗ рк╢рлБркВ ркЬрк╛ркгрк╡рк╛ ркорк╛ркВркЧрлЛ ркЫрлЛ?",
        "ml": "р┤ир┤ор┤╕р╡Нр┤Хр┤╛р┤░р┤В! р┤Юр┤╛р╡╗ р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж AI р┤Хр╡Гр┤╖р┤┐ р┤╕р┤╣р┤╛р┤пр┤┐р┤пр┤╛р┤гр╡Н. р┤╡р┤┐р┤│ р┤░р╡Лр┤Чр┤Щр╡Нр┤Щр╡╛ р┤др┤┐р┤░р┤┐р┤Ър╡Нр┤Ър┤▒р┤┐р┤пр╡╜, р┤Ър┤┐р┤Хр┤┐р┤др╡Нр┤╕р┤╛ р┤╢р╡Бр┤кр┤╛р╡╝р┤╢р┤Хр╡╛, р┤Хр╡Гр┤╖р┤┐ р┤Йр┤кр┤жр╡Зр┤╢р┤В р┤Ор┤ир╡Нр┤ир┤┐р┤╡р┤пр┤┐р╡╜ р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Ж р┤╕р┤╣р┤╛р┤пр┤┐р┤Хр╡Нр┤Хр┤╛р╡╗ р┤Ор┤ир┤┐р┤Хр╡Нр┤Хр╡Н р┤Хр┤┤р┤┐р┤пр╡Бр┤В. р┤ир┤┐р┤Щр╡Нр┤Щр╡╛ р┤Ор┤ир╡Нр┤др┤╛р┤гр╡Н р┤Ер┤▒р┤┐р┤пр┤╛р╡╗ р┤Жр┤Чр╡Нр┤░р┤╣р┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир┤др╡Н?"
      },
      
      // Agricultural terms translations
      "crop": { "hi": "рдлрд╕рд▓", "ta": "рокропро┐ро░рпН", "te": "р░кр░Вр░Я", "bn": "ржлрж╕рж▓", "mr": "рдкреАрдХ", "pa": "рилри╕ри▓", "kn": "р▓мр│Жр▓│р│Ж", "gu": "рккрк╛ркХ", "ml": "р┤╡р┤┐р┤│" },
      "disease": { "hi": "рд░реЛрдЧ", "ta": "роирпЛропрпН", "te": "р░╡р▒Нр░пр░╛р░зр░┐", "bn": "рж░рзЛржЧ", "mr": "рд░реЛрдЧ", "pa": "римри┐риори╛ри░рйА", "kn": "р▓░р│Лр▓Ч", "gu": "рк░рлЛркЧ", "ml": "р┤░р╡Лр┤Чр┤В" },
      "treatment": { "hi": "рдЙрдкрдЪрд╛рд░", "ta": "роЪро┐роХро┐роЪрпНроЪрпИ", "te": "р░Ър░┐р░Хр░┐р░др▒Нр░╕", "bn": "ржЪрж┐ржХрж┐рзОрж╕рж╛", "mr": "рдЙрдкрдЪрд╛рд░", "pa": "риЗри▓ри╛риЬ", "kn": "р▓Ър▓┐р▓Хр▓┐р▓др│Нр▓╕р│Ж", "gu": "рк╕рк╛рк░рк╡рк╛рк░", "ml": "р┤Ър┤┐р┤Хр┤┐р┤др╡Нр┤╕" },
      "prevention": { "hi": "рд░реЛрдХрдерд╛рдо", "ta": "родроЯрпБрокрпНрокрпБ", "te": "р░ир░┐р░╡р░╛р░░р░г", "bn": "ржкрзНрж░рждрж┐рж░рзЛржз", "mr": "рдкреНрд░рддрд┐рдмрдВрдз", "pa": "римриЪри╛риЕ", "kn": "р▓др▓бр│Жр▓Чр▓Яр│Нр▓Яр│Бр▓╡р▓┐р▓Хр│Ж", "gu": "ркирк┐рк╡рк╛рк░ркг", "ml": "р┤кр╡Нр┤░р┤др┤┐р┤░р╡Лр┤зр┤В" },
      "fertilizer": { "hi": "рдЙрд░реНрд╡рд░рдХ", "ta": "роЙро░роорпН", "te": "р░Ор░░р▒Бр░╡р▒Бр░▓р▒Б", "bn": "рж╕рж╛рж░", "mr": "рдЦрдд", "pa": "риЦри╛риж", "kn": "р▓Чр│Кр▓мр│Нр▓мр▓░", "gu": "ркЦрк╛ркдрк░", "ml": "р┤╡р┤│р┤В" },
      "water": { "hi": "рдкрд╛рдиреА", "ta": "роирпАро░рпН", "te": "р░ир▒Ар░░р▒Б", "bn": "ржкрж╛ржирж┐", "mr": "рдкрд╛рдгреА", "pa": "рикри╛ригрйА", "kn": "р▓ир│Ар▓░р│Б", "gu": "рккрк╛ркгрлА", "ml": "р┤╡р╡Жр┤│р╡Нр┤│р┤В" },
      "soil": { "hi": "рдорд┐рдЯреНрдЯреА", "ta": "роорогрпН", "te": "р░ир▒Зр░▓", "bn": "ржорж╛ржЯрж┐", "mr": "рдорд╛рддреА", "pa": "риори┐рй▒риЯрйА", "kn": "р▓ор▓гр│Нр▓гр│Б", "gu": "ркорк╛ркЯрлА", "ml": "р┤ор┤гр╡Нр┤гр╡Н" }
    };

    let translatedContent = message.content;

    // Check for exact message matches first
    const exactMatch = agriculturalTranslations[message.content];
    if (exactMatch && exactMatch[selectedLanguage]) {
      translatedContent = exactMatch[selectedLanguage];
    } else {
      // Translate individual agricultural terms within the message
      let workingContent = message.content;
      
      Object.entries(agriculturalTranslations).forEach(([englishTerm, translations]) => {
        if (typeof translations === 'object' && translations[selectedLanguage]) {
          // Create case-insensitive regex for whole words
          const regex = new RegExp(`\\b${englishTerm}\\b`, 'gi');
          workingContent = workingContent.replace(regex, translations[selectedLanguage]);
        }
      });

      // If content was changed, use the translated version
      if (workingContent !== message.content) {
        translatedContent = workingContent;
      } else {
        // Use common translations for basic responses
        const lang = translations[selectedLanguage] || translations.en;
        
        // Check if it's a common response type and translate accordingly
        if (message.content.includes('Weather & Climate Information') || message.content.includes('weather')) {
          translatedContent = `**${selectedLanguage === 'hi' ? 'рдореМрд╕рдо рдФрд░ рдЬрд▓рд╡рд╛рдпреБ рдХреА рдЬрд╛рдирдХрд╛рд░реА' : 
                                    selectedLanguage === 'ta' ? 'ро╡ро╛ройро┐ро▓рпИ рооро▒рпНро▒рпБроорпН роХро╛ро▓роиро┐ро▓рпИ родроХро╡ро▓рпН' :
                                    selectedLanguage === 'te' ? 'р░╡р░╛р░др░╛р░╡р░░р░гр░В р░ор░░р░┐р░пр▒Б р░╡р░╛р░др░╛р░╡р░░р░г р░╕р░ор░╛р░Ър░╛р░░р░В' :
                                    selectedLanguage === 'bn' ? 'ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржУ ржЬрж▓ржмрж╛ржпрж╝рзБ рждржерзНржп' :
                                    selectedLanguage === 'mr' ? 'рд╣рд╡рд╛рдорд╛рди рдЖрдгрд┐ рд╣рд╡рд╛рдорд╛рди рдорд╛рд╣рд┐рддреА' :
                                    selectedLanguage === 'pa' ? 'риорйМри╕рио риЕридрйЗ риЬри▓ри╡ри╛рипрйВ рижрйА риЬри╛ригриХри╛ри░рйА' :
                                    selectedLanguage === 'kn' ? 'р▓╣р▓╡р▓╛р▓ор▓╛р▓и р▓ор▓др│Нр▓др│Б р▓╣р▓╡р▓╛р▓ор▓╛р▓и р▓ор▓╛р▓╣р▓┐р▓др▓┐' :
                                    selectedLanguage === 'gu' ? 'рк╣рк╡рк╛ркорк╛рки ркЕркирлЗ ркЖркмрлЛрк╣рк╡рк╛ ркорк╛рк╣рк┐ркдрлА' :
                                    selectedLanguage === 'ml' ? 'р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤ер┤пр╡Бр┤В р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤ер┤╛ р┤╡р┤┐р┤╡р┤░р┤Щр╡Нр┤Щр┤│р╡Бр┤В' :
                                    'Weather & Climate Information'}** ЁЯМдя╕П\n\n` + 
                             (selectedLanguage === 'hi' ? 'рдЗрд╖реНрдЯрддрдо рдлрд╕рд▓ рд╡рд┐рдХрд╛рд╕ рдХреЗ рд▓рд┐рдП, рдЗрди рдореМрд╕рдо рдХрд╛рд░рдХреЛрдВ рдкрд░ рд╡рд┐рдЪрд╛рд░ рдХрд░реЗрдВ...' :
                              selectedLanguage === 'ta' ? 'роЙроХроирпНрод рокропро┐ро░рпН ро╡ро│ро░рпНроЪрпНроЪро┐роХрпНроХрпБ, роЗроирпНрод ро╡ро╛ройро┐ро▓рпИ роХро╛ро░рогро┐роХро│рпИ роХро░рпБродрпНродро┐ро▓рпН роХрпКро│рпНро│рпБроЩрпНроХро│рпН...' :
                              selectedLanguage === 'te' ? 'р░╕р░░р▒Ир░и р░кр░Вр░Я р░╡р▒Гр░жр▒Нр░зр░┐ р░Хр▒Лр░╕р░В, р░И р░╡р░╛р░др░╛р░╡р░░р░г р░Хр░╛р░░р░Хр░╛р░▓р░ир▒Б р░кр░░р░┐р░╢р▒Ар░▓р░┐р░Вр░Ър░Вр░бр░┐...' :
                              selectedLanguage === 'bn' ? 'рж╕рж░рзНржмрзЛрждрзНрждржо рж╢рж╕рзНржп ржмрзГржжрзНржзрж┐рж░ ржЬржирзНржп, ржПржЗ ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржХрж╛рж░ржгржЧрзБрж▓рж┐ ржмрж┐ржмрзЗржЪржирж╛ ржХрж░рзБржи...' :
                              selectedLanguage === 'mr' ? 'рдЗрд╖реНрдЯрддрдо рдкреАрдХ рд╡рд╛рдвреАрд╕рд╛рдареА, рдпрд╛ рд╣рд╡рд╛рдорд╛рди рдШрдЯрдХрд╛рдВрдЪрд╛ рд╡рд┐рдЪрд╛рд░ рдХрд░рд╛...' :
                              selectedLanguage === 'pa' ? 'ри╕ри░ри╡рйЛридрио рилри╕ри▓ ри╡ри┐риХри╛ри╕ ри▓риИ, риЗриирйНри╣ри╛риВ риорйМри╕рио риХри╛ри░риХри╛риВ ридрйЗ ри╡ри┐риЪри╛ри░ риХри░рйЛ...' :
                              selectedLanguage === 'kn' ? 'р▓Ер▓др│Нр▓пр│Бр▓др│Нр▓др▓о р▓мр│Жр▓│р│Ж р▓мр│Жр▓│р▓╡р▓гр▓┐р▓Чр│Жр▓Чр▓╛р▓Чр▓┐, р▓И р▓╣р▓╡р▓╛р▓ор▓╛р▓и р▓Ер▓Вр▓╢р▓Чр▓│р▓ир│Нр▓ир│Б р▓кр▓░р▓┐р▓Чр▓гр▓┐р▓╕р▓┐...' :
                              selectedLanguage === 'gu' ? 'ркЖркжрк░рлНрк╢ рккрк╛ркХ рк╡рлГркжрлНркзрк┐ ркорк╛ркЯрлЗ, ркЖ рк╣рк╡рк╛ркорк╛рки рккрк░рк┐ркмрк│рлЛркирлЛ рк╡рк┐ркЪрк╛рк░ ркХрк░рлЛ...' :
                              selectedLanguage === 'ml' ? 'р┤Йр┤др╡Нр┤др┤о р┤╡р┤┐р┤│ р┤╡р┤│р╡╝р┤Ър╡Нр┤Ър┤пр╡Нр┤Хр╡Нр┤Хр┤╛р┤пр┤┐, р┤И р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤ер┤╛ р┤Шр┤Яр┤Хр┤Щр╡Нр┤Щр╡╛ р┤кр┤░р┤┐р┤Чр┤гр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х...' :
                              'For optimal crop growth, consider these weather factors...');
        } else if (message.content.includes('Soil Health') || message.content.includes('soil')) {
          translatedContent = `**${selectedLanguage === 'hi' ? 'рдореГрджрд╛ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдФрд░ рдкреНрд░рдмрдВрдзрди' :
                                    selectedLanguage === 'ta' ? 'роорогрпН роЖро░рпЛроХрпНроХро┐ропроорпН рооро▒рпНро▒рпБроорпН роорпЗро▓ро╛рогрпНроорпИ' :
                                    selectedLanguage === 'te' ? 'р░ир▒Зр░▓ р░Жр░░р▒Лр░Чр▒Нр░пр░В р░ор░░р░┐р░пр▒Б р░ир░┐р░░р▒Нр░╡р░╣р░г' :
                                    selectedLanguage === 'bn' ? 'ржорж╛ржЯрж┐рж░ рж╕рзНржмрж╛рж╕рзНржерзНржп ржУ ржмрзНржпржмрж╕рзНржерж╛ржкржирж╛' :
                                    selectedLanguage === 'mr' ? 'рдорд╛рддреА рдЖрд░реЛрдЧреНрдп рдЖрдгрд┐ рд╡реНрдпрд╡рд╕реНрдерд╛рдкрди' :
                                    selectedLanguage === 'pa' ? 'риори┐рй▒риЯрйА рижрйА ри╕ри┐ри╣рид риЕридрйЗ рикрйНри░римрй░ризрии' :
                                    selectedLanguage === 'kn' ? 'р▓ор▓гр│Нр▓гр▓┐р▓и р▓Жр▓░р│Лр▓Чр│Нр▓п р▓ор▓др│Нр▓др│Б р▓ир▓┐р▓░р│Нр▓╡р▓╣р▓гр│Ж' :
                                    selectedLanguage === 'gu' ? 'ркорк╛ркЯрлАркирлА ркЖрк░рлЛркЧрлНркп ркЕркирлЗ рк╡рлНркпрк╡рк╕рлНркерк╛рккрки' :
                                    selectedLanguage === 'ml' ? 'р┤ор┤гр╡Нр┤гр┤┐р┤ир╡Нр┤▒р╡Ж р┤Жр┤░р╡Лр┤Чр╡Нр┤пр┤╡р╡Бр┤В р┤кр┤░р┤┐р┤кр┤╛р┤▓р┤ир┤╡р╡Бр┤В' :
                                    'Soil Health & Management'}** ЁЯМ▒\n\n` +
                             (selectedLanguage === 'hi' ? 'рд╕реНрд╡рд╕реНрде рдорд┐рдЯреНрдЯреА рд╕рдлрд▓ рдЦреЗрддреА рдХреА рдиреАрдВрд╡ рд╣реИ...' :
                              selectedLanguage === 'ta' ? 'роЖро░рпЛроХрпНроХро┐ропрооро╛рой роорогрпН ро╡рпЖро▒рпНро▒ро┐роХро░рооро╛рой ро╡ро┐ро╡роЪро╛ропродрпНродро┐ройрпН роЕроЯро┐родрпНродро│роорпН...' :
                              selectedLanguage === 'te' ? 'р░Жр░░р▒Лр░Чр▒Нр░пр░Хр░░р░ор▒Ир░и р░ор░Яр▒Нр░Яр░┐ р░╡р░┐р░Ьр░пр░╡р░Вр░др░ор▒Ир░и р░╡р▒Нр░пр░╡р░╕р░╛р░пр░╛р░ир░┐р░Хр░┐ р░кр▒Бр░ир░╛р░жр░┐...' :
                              selectedLanguage === 'bn' ? 'рж╕рзНржмрж╛рж╕рзНржерзНржпржХрж░ ржорж╛ржЯрж┐ рж╕ржлрж▓ ржХрзГрж╖рж┐ржХрж╛ржЬрзЗрж░ ржнрж┐рждрзНрждрж┐...' :
                              selectedLanguage === 'mr' ? 'рдирд┐рд░реЛрдЧреА рдорд╛рддреА рдпрд╢рд╕реНрд╡реА рд╢реЗрддреАрдЪрд╛ рдкрд╛рдпрд╛ рдЖрд╣реЗ...' :
                              selectedLanguage === 'pa' ? 'ри╕ри┐ри╣ридриорй░риж риори┐рй▒риЯрйА ри╕рилри▓ риЦрйЗридрйА рижри╛ риЖризри╛ри░ ри╣рйИ...' :
                              selectedLanguage === 'kn' ? 'р▓Жр▓░р│Лр▓Чр│Нр▓пр▓Хр▓░ р▓ор▓гр│Нр▓гр│Б р▓пр▓╢р▓╕р│Нр▓╡р▓┐ р▓Хр│Гр▓╖р▓┐р▓п р▓Ер▓бр▓┐р▓кр▓╛р▓п...' :
                              selectedLanguage === 'gu' ? 'ркдркВркжрлБрк░рк╕рлНркд ркорк╛ркЯрлА рк╕рклрк│ ркЦрлЗркдрлАркирлЛ ркЖркзрк╛рк░ ркЫрлЗ...' :
                              selectedLanguage === 'ml' ? 'р┤Жр┤░р╡Лр┤Чр╡Нр┤пр┤Хр┤░р┤ор┤╛р┤п р┤ор┤гр╡Нр┤гр╡Н р┤╡р┤┐р┤Ьр┤пр┤Хр┤░р┤ор┤╛р┤п р┤Хр╡Гр┤╖р┤┐р┤пр╡Бр┤Яр╡Ж р┤Ер┤Яр┤┐р┤др╡Нр┤др┤▒...' :
                              'Healthy soil is the foundation of successful farming...');
        } else {
          // Keep the original content if no specific translation is available
          translatedContent = message.content;
        }
      }
    }

    // Update the message with translation
    setMessages(prev => prev.map(msg => 
      msg.id === message.id 
        ? { ...msg, translation: translatedContent, originalContent: msg.content }
        : msg
    ));
  };

  // Update messages when language changes
  useEffect(() => {
    setMessages(prev => prev.map(msg => {
      if (msg.sender === 'bot') {
        const lang = translations[selectedLanguage] || translations.en;
        if (msg.id === "1") {
          return { ...msg, content: lang.greeting };
        }
      }
      return msg;
    }));
  }, [selectedLanguage]);

  if (!isOpen) {
    return (
      <div className="fixed bottom-6 right-6 z-50">
        <Button
          onClick={onToggle}
          size="lg"
          className="rounded-full h-14 w-14 bg-primary hover:bg-primary/90 shadow-lg"
          data-testid="button-open-chatbot"
        >
          <MessageCircle className="h-6 w-6" />
        </Button>
        <Badge className="absolute -top-2 -right-2 bg-red-500 text-white">
          AI
        </Badge>
      </div>
    );
  }

  return (
    <div className={`fixed bottom-6 right-6 z-50 transition-all duration-300 ${
      isMinimized ? 'w-80 h-16' : 'w-[420px] h-[650px]'
    }`}>
      <Card className="h-full flex flex-col shadow-2xl border-primary/20 bg-white dark:bg-gray-800 overflow-hidden">
        {/* Header */}
        <CardHeader className="pb-3 bg-primary text-primary-foreground rounded-t-lg flex-shrink-0">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="bg-white p-1 rounded-full">
                <Bot className="h-5 w-5 text-primary" />
              </div>
              <div>
                <CardTitle className="text-sm">KRISHI AI Assistant</CardTitle>
                {!isMinimized && (
                  <p className="text-xs opacity-90">Multilingual Farming Help</p>
                )}
              </div>
            </div>
            <div className="flex items-center gap-1">
              {!isMinimized && (
                <Select value={selectedLanguage} onValueChange={setSelectedLanguage}>
                  <SelectTrigger className="w-12 h-8 bg-white/10 border-white/20 text-white">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {languages.map((lang) => (
                      <SelectItem key={lang.code} value={lang.code}>
                        {lang.flag} {lang.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              )}
              <Button 
                variant="ghost" 
                size="icon" 
                className="h-8 w-8 text-white hover:bg-white/10"
                onClick={onMinimizeToggle}
                data-testid="button-minimize-chatbot"
              >
                {isMinimized ? <Maximize2 className="h-4 w-4" /> : <Minimize2 className="h-4 w-4" />}
              </Button>
              <Button 
                variant="ghost" 
                size="icon" 
                className="h-8 w-8 text-white hover:bg-white/10"
                onClick={onToggle}
                data-testid="button-close-chatbot"
              >
                <X className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </CardHeader>

        {!isMinimized && (
          <>
            {/* Messages */}
            <CardContent className="flex-1 p-0 overflow-hidden">
              <ScrollArea className="h-full">
                <div className="p-4 space-y-4">
                  {messages.map((message) => (
                    <div
                      key={message.id}
                      className={`flex gap-3 ${
                        message.sender === "user" ? "justify-end" : "justify-start"
                      }`}
                    >
                      {message.sender === "bot" && (
                        <div className="bg-primary p-1 rounded-full h-8 w-8 flex items-center justify-center flex-shrink-0">
                          <Bot className="h-4 w-4 text-white" />
                        </div>
                      )}
                      
                      <div className={`max-w-[75%] space-y-2 ${
                        message.sender === "user" ? "text-right" : "text-left"
                      }`}>
                        <div className={`p-3 rounded-2xl break-words ${
                          message.sender === "user"
                            ? "bg-primary text-white rounded-br-sm"
                            : "bg-muted text-foreground rounded-bl-sm dark:bg-gray-700 dark:text-gray-200"
                        }`}>
                          <div 
                            className="text-sm whitespace-pre-wrap word-wrap break-word" 
                            dangerouslySetInnerHTML={{
                              __html: (message.translation || message.content).replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                            }}
                          />
                        </div>
                        
                        {message.sender === "bot" && (
                          <div className="flex items-center gap-2 text-xs">
                            <Button
                              variant="ghost"
                              size="icon"
                              className="h-6 w-6"
                              onClick={() => handleTextToSpeech(message.translation || message.content)}
                              data-testid="button-speak"
                            >
                              {isSpeaking ? <VolumeX className="h-3 w-3" /> : <Volume2 className="h-3 w-3" />}
                            </Button>
                            
                            <Button
                              variant="ghost"
                              size="icon"
                              className="h-6 w-6"
                              onClick={() => translateMessage(message)}
                              data-testid="button-translate"
                            >
                              <Languages className="h-3 w-3" />
                            </Button>
                            
                            <span className="text-muted-foreground dark:text-gray-400">
                              {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                            </span>
                          </div>
                        )}
                      </div>

                      {message.sender === "user" && (
                        <img src={farmerAvatar} alt="User" className="h-8 w-8 rounded-full flex-shrink-0" />
                      )}
                    </div>
                  ))}
                  
                  {isTyping && (
                    <div className="flex gap-3">
                      <div className="bg-primary p-1 rounded-full h-8 w-8 flex items-center justify-center">
                        <Bot className="h-4 w-4 text-white" />
                      </div>
                      <div className="bg-muted p-3 rounded-2xl rounded-bl-sm dark:bg-gray-700">
                        <div className="flex space-x-1">
                          <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce" style={{ animationDelay: '0ms' }} />
                          <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce" style={{ animationDelay: '150ms' }} />
                          <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce" style={{ animationDelay: '300ms' }} />
                        </div>
                      </div>
                    </div>
                  )}
                </div>
                <div ref={messagesEndRef} />
              </ScrollArea>
            </CardContent>

            {/* Input */}
            <div className="p-4 border-t dark:border-gray-600 flex-shrink-0">
              <div className="flex gap-2">
                <Input
                  ref={inputRef}
                  value={newMessage}
                  onChange={(e) => setNewMessage(e.target.value)}
                  placeholder={`Ask in ${languages.find(l => l.code === selectedLanguage)?.name}...`}
                  className="flex-1 dark:bg-gray-700 dark:text-gray-200 dark:border-gray-600"
                  data-testid="input-chat-message"
                  onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                />
                
                <Button
                  variant={isListening ? "destructive" : "outline"}
                  size="icon"
                  onClick={handleVoiceInput}
                  data-testid="button-voice-input"
                >
                  {isListening ? <MicOff className="h-4 w-4" /> : <Mic className="h-4 w-4" />}
                </Button>
                
                <Button 
                  onClick={handleSendMessage} 
                  disabled={!newMessage.trim() || isTyping}
                  data-testid="button-send-message"
                >
                  <Send className="h-4 w-4" />
                </Button>
              </div>
              
              {isListening && (
                <div className="mt-2 text-center">
                  <Badge variant="destructive" className="animate-pulse">
                    <Mic className="h-3 w-3 mr-1" />
                    Listening in {languages.find(l => l.code === selectedLanguage)?.name}...
                  </Badge>
                </div>
              )}
            </div>
          </>
        )}
      </Card>
    </div>
  );
}
